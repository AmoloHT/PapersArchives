#include <stdio.h>
#include <windows.h>
#include <tlhelp32.h>
#include "AntiSandbox.h"

DWORD GetPID(LPCWSTR exeName) {
    DWORD processId = 0;
    HANDLE snap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);

    if (snap != INVALID_HANDLE_VALUE)
    {
        PROCESSENTRY32 pe32;
        pe32.dwSize = sizeof(pe32);

        if (Process32First(snap, &pe32))
        {
            if (!pe32.th32ProcessID)
                Process32Next(snap, &pe32);
            do
            {
                if (!lstrcmpiW((LPCWSTR)pe32.szExeFile, exeName))
                {
                    processId = pe32.th32ProcessID;
                    break;
                }
            } while (Process32Next(snap, &pe32));
        }
    }
    CloseHandle(snap);

    return processId;
}

// 1. Debugger Present
BOOL DebuggerPresent() {
    if (IsDebuggerPresent()) {                                              // Check if there is a debugger present
        return 1;
    }

    BOOL remoteDbgPresent;
    CheckRemoteDebuggerPresent(GetCurrentProcess(), &remoteDbgPresent);     // Verify that it is being debugged remotely
    if (remoteDbgPresent) {
        return 1;
    }

    return 0;
}

// 2. Anti-Dumping
BOOL ErasePEHeader() {
    DWORD oldProtect = 0;

    char* processBaseAddress = (char*)GetModuleHandle(NULL);                 // Get the base address of our running EXE

    VirtualProtect(processBaseAddress, 4096, PAGE_READWRITE, &oldProtect);   // Releases access to read and write to the pe32 header

    RtlZeroMemory(processBaseAddress, 4096);                                 // Clean PE header

    return 0;
}

// 3. Sandbox Process
BOOL SandboxSuspiciousProcess() {
    for (int i = 0; i < sizeof(sandboxProcess) / sizeof(sandboxProcess[0]); i++) {          // Cycle through the entire list of common sandbox processes
        DWORD pid = GetPID(sandboxProcess[i]);                                              // Get the PID of the process by name
        
        if (pid != 0) {                                                                     // Checks if the returned PID is different from 0
            return 1;                                                                       // If it is different from 0, it means there is a
        }                                                                                   // suspicious process
    }

    return 0;
}

int main()
{
    puts("[+] Malware started! Press ENTER");

    fgetc(stdin);

    if (DebuggerPresent() != 0) {
        puts("[-] Debugger is present");
    }

    if (ErasePEHeader() == 0) {
        puts("[+] PE header clean");
    }

    if (SandboxSuspiciousProcess() != 0) {
        puts("[-] There are sandbox processes on this machine");
    }
    else {
        puts("[+] There are no suspicious processes");
    }

    fgetc(stdin);
}